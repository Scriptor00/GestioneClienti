@model List<WebAppEF.Entities.Prodotto>

@{
    ViewData["Title"] = "Carrello";
}

<!DOCTYPE html>
<html lang="it">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
    <style>
       body {
    background-color: #1a1a1a;
    color: #fff;
    font-family: 'Arial', sans-serif;
}


.navbar {
    background: linear-gradient(145deg, #0a0a1a 0%, #1a1a2e 100%);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.6);
    border-bottom: 1px solid #0d6efd;
    padding: 0.8rem 1rem;
    position: relative;
    z-index: 1000;
}

.navbar::before {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(13, 110, 253, 0.7), transparent);
}

.navbar-brand {
    font-family: 'Orbitron', sans-serif;
    font-weight: 700;
    font-size: 1.8rem;
    color: #fff !important;
    text-shadow: 0 0 10px rgba(13, 110, 253, 0.7);
    letter-spacing: 1px;
    transition: all 0.3s;
    display: flex;
    align-items: center;
}

.navbar-brand:hover {
    text-shadow: 0 0 15px rgba(13, 110, 253, 0.9);
    transform: scale(1.02);
}

.navbar-brand i {
    margin-right: 10px;
    color: #0d6efd;
    font-size: 1.5rem;
    transition: all 0.3s;
}

.navbar-brand:hover i {
    color: #ff4b2b;
    transform: rotate(15deg);
}

.nav-link {
    color: #fff !important;
    font-weight: 500;
    padding: 0.6rem 1.2rem !important;
    margin: 0 0.3rem;
    border-radius: 6px;
    transition: all 0.3s;
    position: relative;
    display: flex;
    align-items: center;
}

.nav-link i {
    margin-right: 8px;
    font-size: 1.1rem;
    transition: all 0.3s;
}

.nav-link::before {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 2px;
    background: #ff4b2b;
    transition: all 0.3s;
}

.nav-link:hover::before {
    width: 80%;
}

.nav-link:hover {
    background: rgba(13, 110, 253, 0.2);
}

.nav-link:hover i {
    color: #ff4b2b;
    transform: scale(1.2);
}

.navbar-toggler {
    border: 1px solid #0d6efd;
    padding: 0.5rem;
}

.navbar-toggler-icon {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%28255, 255, 255, 0.8%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e");
    transition: all 0.3s;
}

.navbar-toggler:hover .navbar-toggler-icon {
    transform: scale(1.1);
}


.card {
    transition: transform 0.2s, box-shadow 0.2s;
    border: none;
    border-radius: 12px;
    background-color: #2d2d2d;
}

.card:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.4);
}

.card-img-top {
    height: 150px;
    object-fit: cover;
    border-top-left-radius: 12px;
    border-top-right-radius: 12px;
}

.quantity-input {
    width: 60px;
    text-align: center;
}

.footer {
    background-color: #0d6efd;
    color: #fff;
    padding: 20px 0;
    margin-top: 40px;
    text-align: center;
}

.footer a {
    color: #fff;
    text-decoration: none;
}

.footer a:hover {
    opacity: 0.8;
}

.alert {
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    background-color: #333;
    color: #fff;
}

.card-body {
    padding: 20px;
}

.btn-primary {
    background-color: #0d6efd;
    border-color: #0d6efd;
}

.btn-outline-secondary {
    border-color: #0d6efd;
    color: #0d6efd;
}

.btn-danger {
    background-color: #dc3545;
    border-color: #dc3545;
}

.btn-danger:hover {
    background-color: #c82333;
    border-color: #c82333;
}

.btn-outline-secondary:hover {
    background-color: #0d6efd;
    color: #fff;
}

.gaming-dropdown {
    background: linear-gradient(145deg, #1a1a1a 0%, #2d2d2d 100%);
    border: 1px solid #0d6efd;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(13, 110, 253, 0.4);
    padding: 0;
    overflow: hidden;
    min-width: 220px;
}

.gaming-dropdown .dropdown-item {
    color: #e0e0e0;
    padding: 10px 15px;
    font-weight: 500;
    transition: all 0.3s ease;
    border-left: 3px solid transparent;
    background: transparent;
}

.gaming-dropdown .dropdown-item:hover {
    background: linear-gradient(90deg, rgba(13,110,253,0.2) 0%, transparent 100%);
    color: #fff;
    border-left: 3px solid #0d6efd;
    transform: translateX(5px);
}

.gaming-dropdown .dropdown-item i {
    color: #0d6efd;
    width: 20px;
    text-align: center;
}

.gaming-dropdown .dropdown-divider {
    border-color: rgba(13, 110, 253, 0.3);
    margin: 0;
}

.logout-btn {
    color: #ff4b2b !important;
}

.logout-btn:hover {
    background: linear-gradient(90deg, rgba(255,75,43,0.2) 0%, transparent 100%) !important;
    border-left: 3px solid #ff4b2b !important;
}

.gaming-user-menu::after {
    border-top-color: #0d6efd;
    transition: transform 0.3s cubic-bezier(0.68, -0.55, 0.27, 1.55);
}

/* Animazione */
@@keyframes dropdownFadeIn {
    from {
        opacity: 0;
        transform: translateY(-10px) scale(0.95);
    }
    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }
}

.gaming-dropdown.show {
    animation: dropdownFadeIn 0.3s cubic-bezier(0.68, -0.55, 0.27, 1.55) forwards;
}

/* Media Query per Mobile */
@@media (max-width: 768px) {
    .navbar-collapse {
        background: linear-gradient(145deg, #0a0a1a 0%, #1a1a2e 100%);
        border: 1px solid #0d6efd;
        border-radius: 0 0 10px 10px;
        padding: 1rem;
        margin-top: 0.5rem;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
    }
    
    .nav-link {
        margin: 0.3rem 0;
        padding: 0.8rem 1rem !important;
    }
    
    .nav-link::before {
        display: none;
    }
}
    </style>
</head>

<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container">
            <a class="navbar-brand" href="@Url.Action("Home", "Prodotti")">
                <i class="bi bi-controller me-2"></i>Gaming Store
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="@Url.Action("Home", "Prodotti")"><i class="bi bi-house-door me-1"></i>Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/Prodotti"><i class="bi bi-list-ul me-1"></i>Catalogo</a>
                    </li>
                    @* <li class="nav-item">
                        <a class="nav-link" href="@Url.Action("Carrello", "Prodotti")"><i class="bi bi-cart me-1"></i>Carrello</a>
                    </li> *@
                    @if (User.Identity.IsAuthenticated)
                {
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle gaming-user-menu" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="bi bi-person-circle me-1"></i>@User.Identity.Name
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end gaming-dropdown" aria-labelledby="navbarDropdown">
                            <li><a class="dropdown-item" href="@Url.Action("Profilo", "Prodotti")">
                                <i class="bi bi-person-gear me-2"></i>Profilo
                            </a></li>
                            <li><a class="dropdown-item" href="@Url.Action("Carrello", "Prodotti")">
                                <i class="bi bi-collection-play me-2"></i>I miei ordini
                            </a></li>
                            <li><hr class="dropdown-divider my-2" /></li>
                            <li>
                                <form asp-controller="Account" asp-action="Logout" method="post">
                                    <button type="submit" class="dropdown-item logout-btn">
                                        <i class="bi bi-power me-2"></i>Logout
                                    </button>
                                </form>
                            </li>
                        </ul>
                    </li>
                
                }
                else
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/Account/Login">
                            <i class="bi bi-person-circle me-1"></i>Account
                        </a>
                    </li>
                }
            </ul>
        </div>
    </div>
</nav>

    <!-- Contenuto Principale -->
    <div class="container mt-5">
        <h1 class="text-center text-primary mb-4">Il Tuo Carrello</h1>

        <!-- Lista dei Prodotti nel Carrello -->
        <div class="row">
            <div class="col-md-8" id="cart-items">
                <!-- I prodotti verranno caricati qui dinamicamente -->
            </div>

            <!-- Riepilogo Ordine -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Riepilogo Ordine</h5>
                        <hr>
                        <p class="card-text">
                            <strong>Totale Prodotti:</strong> <span id="total-items">0</span>
                        </p>
                        <p class="card-text">
                            <strong>Totale:</strong> <span id="total-price">€0.00</span>
                        </p>
                        <button class="btn btn-primary w-100">
                            <i class="bi bi-credit-card me-2"></i>Procedi al Pagamento
                        </button>
                        <a href="/Prodotti" class="btn btn-outline-secondary w-100 mt-2">
                            <i class="bi bi-arrow-left me-2"></i>Continua lo Shopping
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="footer text-center">
        <div class="container">
            <p>&copy; 2025 Gaming Store. Tutti i diritti riservati.</p>
            <p>
                <a href="@Url.Action("Privacy", "Home")">Privacy Policy</a> |
                <a href="@Url.Action("Contatti", "Home")">Contatti</a>
            </p>
        </div>
    </footer>

    <!-- Script per gestire il carrello -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const cartItems = JSON.parse(localStorage.getItem("cart")) || [];
            const cartContainer = document.getElementById("cart-items");
            const totalItemsElement = document.getElementById("total-items");
            const totalPriceElement = document.getElementById("total-price");

            let total = 0;
            let totalItems = 0;

            // Funzione per aggiornare il riepilogo dell'ordine
            function updateOrderSummary() {
                total = 0;
                totalItems = 0;

                cartItems.forEach(item => {
                    total += item.prezzo * item.quantita;
                    totalItems += item.quantita;
                });

                totalItemsElement.textContent = totalItems;
                totalPriceElement.textContent = `€${total.toFixed(2)}`;
            }

            // Funzione per rimuovere un prodotto dal carrello
            function removeFromCart(productName) {
                const updatedCart = cartItems.filter(item => item.nomeProdotto !== productName);
                localStorage.setItem("cart", JSON.stringify(updatedCart));
                location.reload(); // Ricarica la pagina per aggiornare il carrello
            }

            // Funzione per aggiornare la quantità di un prodotto
            function updateQuantity(productName, newQuantity) {
                const product = cartItems.find(item => item.nomeProdotto === productName);
                if (product) {
                    product.quantita = parseInt(newQuantity);
                    localStorage.setItem("cart", JSON.stringify(cartItems));
                    updateOrderSummary();
                }
            }

            // Mostra i prodotti nel carrello
            if (cartItems.length === 0) {
                cartContainer.innerHTML = `
                    <div class="alert alert-info text-center">
                        <i class="bi bi-info-circle me-2"></i>Il tuo carrello è vuoto.
                    </div>
                `;
            } else {
                cartItems.forEach(item => {
                    const productTotal = item.prezzo * item.quantita;

                    cartContainer.innerHTML += `
                        <div class="card mb-3">
                            <div class="row g-0">
                                <div class="col-md-4">
                                    <img src="${item.immagineUrl}" class="card-img-top" alt="${item.nomeProdotto}">
                                </div>
                                <div class="col-md-8">
                                    <div class="card-body">
                                        <h5 class="card-title">${item.nomeProdotto}</h5>
                                        <p class="card-text text-muted">${item.categoria}</p>
                                        <p class="card-text">
                                            <strong>Prezzo:</strong> €${item.prezzo.toFixed(2)}
                                        </p>
                                        <div class="d-flex align-items-center">
                                            <label for="quantity" class="me-2">Quantità:</label>
                                            <input type="number" class="form-control quantity-input" value="${item.quantita}" min="1" onchange="updateQuantity('${item.nomeProdotto}', this.value)">
                                            <button class="btn btn-danger ms-3" onclick="removeFromCart('${item.nomeProdotto}')">
                                                <i class="bi bi-trash"></i> Rimuovi
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                });

                updateOrderSummary();
            }

            // Espone le funzioni al contesto globale
            window.removeFromCart = removeFromCart;
            window.updateQuantity = updateQuantity;
        });
    </script>
</body>

</html>